%% Generated by the Erlang ASN.1 compiler version:1.7
%% Purpose: Erlang record definitions for each named and unnamed
%% SEQUENCE and SET, and macro definitions for each value
%% definition,in module SDPOUTPUTCDR



-record('CDRProcessed',{
recordType, sdpID, cdrID, originalCdrNodeID = asn1_NOVALUE, originalCdrID = asn1_NOVALUE, subscriberNumber, relatedNumber, originalCdrTimeStamp = asn1_NOVALUE, cDRProcessingTimeStamp, balanceBeforeCDRProc, balanceAfterCDRProc, eventCost, surplusDebit = asn1_NOVALUE, familyAndFriendsIndicator = asn1_NOVALUE, serviceClassId, currencyType, tempBlocked = asn1_NOVALUE, accountNumber = asn1_NOVALUE, accountGroupID = asn1_NOVALUE, serviceOfferings = asn1_NOVALUE, selectedCommunityIndicator = asn1_NOVALUE, communityID1Charged = asn1_NOVALUE, communityID2Charged = asn1_NOVALUE, communityID3Charged = asn1_NOVALUE, communityID1NonCharged = asn1_NOVALUE, communityID2NonCharged = asn1_NOVALUE, communityID3NonCharged = asn1_NOVALUE, communityDataNonChargedNotAvailable = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, updatedAccumulatorID = asn1_NOVALUE, cdrProcDedicatedAccounts = asn1_NOVALUE, cdrProcAccumulators = asn1_NOVALUE, categorizationInformation = asn1_NOVALUE, ratedDurations = asn1_NOVALUE, individualPriceFactorHistory = asn1_NOVALUE}). % with extension mark

-record('AccountAdjustment',{
adjustmentRecordType, sdpID, cdrID, accountNumber, subscriberNumber, adjustmentTimeStamp, adjustmentAction = asn1_NOVALUE, balanceBefore = asn1_NOVALUE, balanceAfter = asn1_NOVALUE, adjustmentAmount = asn1_NOVALUE, serviceClassId, currencyType, originalAdjustmentAmount = asn1_NOVALUE, originalCurrencyType = asn1_NOVALUE, originNodeType = asn1_NOVALUE, originNodeId = asn1_NOVALUE, origTransactionID = asn1_NOVALUE, origTransactionTimeStamp = asn1_NOVALUE, transactionType = asn1_NOVALUE, transactionCode = asn1_NOVALUE, originOperatorId = asn1_NOVALUE, supervisionExpDateBefore = asn1_NOVALUE, supervisionExpDateAfter = asn1_NOVALUE, creditClearancePeriodBefore = asn1_NOVALUE, creditClearancePeriodAfter = asn1_NOVALUE, servFeeExpDateBefore = asn1_NOVALUE, servFeeExpDateAfter = asn1_NOVALUE, serviceRemovalPeriodBefore = asn1_NOVALUE, serviceRemovalPeriodAfter = asn1_NOVALUE, accountFlagsBefore = asn1_NOVALUE, accountFlagsAfter = asn1_NOVALUE, newServiceClass = asn1_NOVALUE, valueVoucherExpDateBefore = asn1_NOVALUE, valueVoucherExpDateAfter = asn1_NOVALUE, temporaryServiceClassBefore = asn1_NOVALUE, temporaryServiceClassAfter = asn1_NOVALUE, activationDate = asn1_NOVALUE, refillUnbarTimeStamp = asn1_NOVALUE, oldLanguage = asn1_NOVALUE, newLanguage = asn1_NOVALUE, promotionPlanIDBefore = asn1_NOVALUE, promotionPlanIDAfter = asn1_NOVALUE, negativeBalanceBarringDate = asn1_NOVALUE, oldAccountGroupID = asn1_NOVALUE, oldServiceOfferings = asn1_NOVALUE, oldCommunityID1 = asn1_NOVALUE, oldCommunityID2 = asn1_NOVALUE, oldCommunityID3 = asn1_NOVALUE, newAccountGroupID = asn1_NOVALUE, newServiceOfferings = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, newCommunityID1 = asn1_NOVALUE, newCommunityID2 = asn1_NOVALUE, newCommunityID3 = asn1_NOVALUE, counterTypeID = asn1_NOVALUE, totalCounterStartValue = asn1_NOVALUE, totalCounterDeltaValue = asn1_NOVALUE, periodCounterStartValue = asn1_NOVALUE, periodCounterDeltaValue = asn1_NOVALUE, deductedAmount = asn1_NOVALUE, cost = asn1_NOVALUE, costService = asn1_NOVALUE, presentedCost = asn1_NOVALUE, chargingSuccessCode = asn1_NOVALUE, chargingIndicator = asn1_NOVALUE, familyAndFriendsAction = asn1_NOVALUE, familyAndFriendsNumber = asn1_NOVALUE, familyAndFriendsIndicator = asn1_NOVALUE, owner = asn1_NOVALUE, accountHomeRegion = asn1_NOVALUE, changedPIN = asn1_NOVALUE, accountUnbarSuppressed = asn1_NOVALUE, adjustmentDedicatedAccounts = asn1_NOVALUE, adjustmentAccumulators = asn1_NOVALUE, origServiceClassBefore = asn1_NOVALUE, origServiceClassAfter = asn1_NOVALUE, serviceSessionID = asn1_NOVALUE, duplicatingCDRNode = asn1_NOVALUE, aggregatedBalanceBefore = asn1_NOVALUE, aggregatedBalanceAfter = asn1_NOVALUE, adjustmentFaFs = asn1_NOVALUE, adjustmentOffers = asn1_NOVALUE, lastRecord = asn1_NOVALUE}). % with extension mark

-record('NegativeBalance',{
accountNumber, accountBalanceBefore, accountBalanceAfter, timeStamp, sdpID = asn1_NOVALUE, cdrID = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, aggregatedBalanceBefore = asn1_NOVALUE, aggregatedBalanceAfter = asn1_NOVALUE, aggregatedBalanceDedicatedAccounts = asn1_NOVALUE}). % with extension mark

-record('BonusAdjustment',{
sdpID, cdrID, accountNumber, subscriberNumber, bonusTimeStamp, currencyType, serviceClassId, accountBalanceBeforeBonus = asn1_NOVALUE, accountBalanceAfterBonus = asn1_NOVALUE, bonusAmount = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, accountGroupID = asn1_NOVALUE, serviceOfferings = asn1_NOVALUE, bonusDedicatedAccounts = asn1_NOVALUE, bonusAccumulators = asn1_NOVALUE, lifeCycleInformation = asn1_NOVALUE}). % with extension mark

-record('ServiceFeeDeduction',{
sdpID, cdrID, originNodeType, timeStamp, accountNumber, serviceFeeAmount, successCode, oldServiceClass, newServiceClass = asn1_NOVALUE, currencyType, servFeeExpDateBefore = asn1_NOVALUE, servFeeExpDateAfter = asn1_NOVALUE, accountFlags, negativeBalanceBarringDate = asn1_NOVALUE, balanceAfterDeduction, lastRecord = asn1_NOVALUE, accountGroupID = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, subscriberNumber = asn1_NOVALUE, serviceFeeType = asn1_NOVALUE, debt = asn1_NOVALUE, subscriberFee = asn1_NOVALUE, clearedDedicatedAccounts = asn1_NOVALUE, clearedAccumulators = asn1_NOVALUE, aggregatedBalanceBefore = asn1_NOVALUE, aggregatedBalanceAfter = asn1_NOVALUE, aggregatedBalanceDedicatedAccounts = asn1_NOVALUE, removedFaFs = asn1_NOVALUE, removedOffers = asn1_NOVALUE, ignoredDebt = asn1_NOVALUE}). % with extension mark

-record('LifeCycleChange',{
sdpID, cdrID, originNodeType, timeStamp, accountNumber, subscriberNumber, serviceClassId, language = asn1_NOVALUE, currencyType, initialAmountAdded = asn1_NOVALUE, initialSupervisionExpDate = asn1_NOVALUE, initialServiceFeeExpDate = asn1_NOVALUE, supervisionExpDate = asn1_NOVALUE, creditClearancePeriod = asn1_NOVALUE, servFeeExpDate = asn1_NOVALUE, serviceRemovalPeriod = asn1_NOVALUE, clearedAccountValue = asn1_NOVALUE, accountFlagsBefore, accountFlagsAfter, activationDate = asn1_NOVALUE, refillUnbarTimeStamp = asn1_NOVALUE, iVRWelcomeStatus = asn1_NOVALUE, negativeBalanceBarringDate = asn1_NOVALUE, promotionPlanID = asn1_NOVALUE, promotionPlanStartDate = asn1_NOVALUE, promotionPlanEndDate = asn1_NOVALUE, accumulatedRefillCounter = asn1_NOVALUE, accumulatedRefillValue = asn1_NOVALUE, accumulatedProgressionCounter = asn1_NOVALUE, accumulatedProgressionValue = asn1_NOVALUE, preActReasonCode = asn1_NOVALUE, creditCleared = asn1_NOVALUE, serviceExpired = asn1_NOVALUE, originOperatorId = asn1_NOVALUE, originNodeId, origTransactionID = asn1_NOVALUE, origTransactionTimeStamp = asn1_NOVALUE, lastRecord = asn1_NOVALUE, accountGroupID = asn1_NOVALUE, serviceOfferings = asn1_NOVALUE, communityID1 = asn1_NOVALUE, communityID2 = asn1_NOVALUE, communityID3 = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, initialCreditClearanceGracePeriod = asn1_NOVALUE, initialServiceRemovalGracePeriod = asn1_NOVALUE, subscriberCreated = asn1_NOVALUE, subscriberDeleted = asn1_NOVALUE, accountHomeRegion = asn1_NOVALUE, disconnectionCode = asn1_NOVALUE, clearedDedicatedAccounts = asn1_NOVALUE, creditClearedReasonMainAccount = asn1_NOVALUE, clearedAggregatedValue = asn1_NOVALUE, removedFaFs = asn1_NOVALUE, removedOffers = asn1_NOVALUE}). % with extension mark

-record('NegativeBalanceBarred',{
sdpID, cdrID, accountNumber, timeStamp, accountBalance, currencyType, lastRecord = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, aggregatedBalance = asn1_NOVALUE}). % with extension mark

-record('ValueVoucherExpiry',{
sdpID, cdrID, accountNumber, timeStamp, accountFlagsBefore = asn1_NOVALUE, accountFlagsAfter = asn1_NOVALUE, oldServiceClass, newServiceClass, negativeBalanceBarringDate = asn1_NOVALUE, currencyType, valueVoucherExpDate, lastRecord = asn1_NOVALUE, subscriberConvergent = asn1_NOVALUE, clearedDedicatedAccounts = asn1_NOVALUE, clearedAccumulators = asn1_NOVALUE, aggregatedBalanceBefore = asn1_NOVALUE, aggregatedBalanceAfter = asn1_NOVALUE, removedFaFs = asn1_NOVALUE, removedOffers = asn1_NOVALUE}). % with extension mark

-record('PeriodicAdjustment',{
sdpID, cdrID, timeStamp, accountNumber, dedicatedAccountID, currencyType, lastRecord = asn1_NOVALUE, replenishmentID, rolloverNewPeriod = asn1_NOVALUE, rolloverOldPeriod = asn1_NOVALUE, replenishmentDate = asn1_NOVALUE, replenishmentAmount = asn1_NOVALUE, oldReplenishmentAmount = asn1_NOVALUE, balanceBeforeAdjustment = asn1_NOVALUE, unusedRollover = asn1_NOVALUE, oldServiceClass = asn1_NOVALUE, serviceClassId, dedicatedAccountAdjustment = asn1_NOVALUE, dedicatedAccountClearance = asn1_NOVALUE, rolloverCalculationApplied = asn1_NOVALUE, periodOffset = asn1_NOVALUE, startDate = asn1_NOVALUE, periodLength = asn1_NOVALUE, typeOfPeriod = asn1_NOVALUE, aggrBalBeforeAdjustment = asn1_NOVALUE, dedicatedAccountRealMoney = asn1_NOVALUE, offerID = asn1_NOVALUE, accountUnitType = asn1_NOVALUE}). % with extension mark

-record('PeriodicReset',{
sdpID, cdrID, timeStamp, accountNumber, currencyType, lastRecord = asn1_NOVALUE, periodicResetID, periodicResetDate = asn1_NOVALUE, balanceAtStartOfNewPeriod = asn1_NOVALUE, balanceBeforeAdjustment = asn1_NOVALUE, oldServiceClass = asn1_NOVALUE, serviceClassId, periodOffset = asn1_NOVALUE, startDate = asn1_NOVALUE, periodLength = asn1_NOVALUE, typeOfPeriod = asn1_NOVALUE, aggrBalAtStartOfNewPeriod = asn1_NOVALUE, aggrBalBeforeAdjustment = asn1_NOVALUE}). % with extension mark

-record('TemporaryBlock',{
sdpID, cdrID, accountNumber, subscriberNumber, adjustmentTimeStamp, originNodeType = asn1_NOVALUE, originNodeID = asn1_NOVALUE, origTransactionID = asn1_NOVALUE, origTransactionTimeStamp = asn1_NOVALUE, transactionType = asn1_NOVALUE, transactionCode = asn1_NOVALUE, originOperatorId = asn1_NOVALUE, temporaryBlockedStatusBefore = asn1_NOVALUE, temporaryBlockedStatusAfter = asn1_NOVALUE}). % with extension mark

-record('AdjustmentAccumulator',{
accumulatorID, accumulatorValueBefore = asn1_NOVALUE, accumulatorValueAfter = asn1_NOVALUE, accumulatorAdjustment = asn1_NOVALUE, action, clearedAccumulatorValue = asn1_NOVALUE, accumulatorClearDateBefore = asn1_NOVALUE, accumulatorClearDateAfter = asn1_NOVALUE, accumulatorValueInitial = asn1_NOVALUE, accumulatorClearDateInitial = asn1_NOVALUE}). % with extension mark

-record('AdjustmentDedicatedAccount',{
dedicatedAccountID, campaignIdentifier = asn1_NOVALUE, accountValueBefore = asn1_NOVALUE, accountValueAfter = asn1_NOVALUE, adjustmentAmount = asn1_NOVALUE, action, accountExpiryDateBefore = asn1_NOVALUE, accountExpiryDateAfter = asn1_NOVALUE, originalAdjustmentAmount = asn1_NOVALUE, clearedAccountValue = asn1_NOVALUE, accountValueInitial = asn1_NOVALUE, accountExpiryDateInitial = asn1_NOVALUE, accountCreditClearedReason = asn1_NOVALUE, accountStartDateBefore = asn1_NOVALUE, accountStartDateAfter = asn1_NOVALUE, accountStartDateInitial = asn1_NOVALUE, realMoney = asn1_NOVALUE, offerID = asn1_NOVALUE, accountUnitType = asn1_NOVALUE, adjustmentSubDedicatedAccounts = asn1_NOVALUE}). % with extension mark

-record('AdjustmentFaF',{
familyAndFriendsNumber, action, familyAndFriendsIndicator, fafExpiryDateBefore = asn1_NOVALUE, fafExpiryDateAfter = asn1_NOVALUE, fafStartDateBefore = asn1_NOVALUE, fafStartDateAfter = asn1_NOVALUE, offerID = asn1_NOVALUE, reason = asn1_NOVALUE, owner = asn1_NOVALUE}). % with extension mark

-record('AdjustmentOffer',{
offerID, action, offerExpiryDateBefore = asn1_NOVALUE, offerExpiryDateAfter = asn1_NOVALUE, offerExpiryDateInitial = asn1_NOVALUE, offerStartDateBefore = asn1_NOVALUE, offerStartDateAfter = asn1_NOVALUE, offerStartDateInitial = asn1_NOVALUE, reason = asn1_NOVALUE}). % with extension mark

-record('AdjustmentSubDedicatedAccount',{
dedicatedAccountID, accountValueBefore = asn1_NOVALUE, accountValueAfter = asn1_NOVALUE, adjustmentAmount = asn1_NOVALUE, accountExpiryDateBefore = asn1_NOVALUE, accountExpiryDateAfter = asn1_NOVALUE, originalAdjustmentAmount = asn1_NOVALUE, clearedAccountValue = asn1_NOVALUE, accountValueInitial = asn1_NOVALUE, accountExpiryDateInitial = asn1_NOVALUE, accountStartDateBefore = asn1_NOVALUE, accountStartDateAfter = asn1_NOVALUE, accountStartDateInitial = asn1_NOVALUE, mergedIntoDedicatedAccountID = asn1_NOVALUE}). % with extension mark

-record('AggregatedBalanceDedicatedAccount',{
dedicatedAccountID, campaignIdentifier = asn1_NOVALUE, accountValueBefore, accountValueAfter, accountDeductedAmount = asn1_NOVALUE, offerID = asn1_NOVALUE, aggregatedBalanceSubDedicatedAccounts = asn1_NOVALUE}). % with extension mark

-record('AggregatedBalanceSubDedicatedAccount',{
dedicatedAccountID, accountValueBefore, accountValueAfter, accountDeductedAmount = asn1_NOVALUE}). % with extension mark

-record('BonusAccumulator',{
accumulatorID, accumulatorValueBefore, accumulatorValueAfter, accumulatorDelta}). % with extension mark

-record('BonusDedicatedAccount',{
dedicatedAccountID, campaignIdentifier = asn1_NOVALUE, accountValueBefore, accountValueAfter, bonusAmount, accountExpiryDateBefore = asn1_NOVALUE, accountExpiryDateAfter = asn1_NOVALUE}). % with extension mark

-record('CategorizationInformation',{
categoryType1 = asn1_NOVALUE, categoryType2 = asn1_NOVALUE, categoryType3 = asn1_NOVALUE, categoryType4 = asn1_NOVALUE}). % with extension mark

-record('CDRProcAccumulator',{
accumulatorID, accumulatorValueBefore = asn1_NOVALUE, accumulatorValueAfter = asn1_NOVALUE, accumulatorDelta = asn1_NOVALUE}). % with extension mark

-record('CDRProcDedicatedAccount',{
dedicatedAccountID, campaignIdentifier = asn1_NOVALUE, accountValueBefore, accountValueAfter, chargedAmount}). % with extension mark

-record('ClearedAccumulator',{
accumulatorID, clearedAccumulatorValue}). % with extension mark

-record('ClearedDedicatedAccount',{
dedicatedAccountID, campaignIdentifier = asn1_NOVALUE, clearedAccountValue, accountCreditClearedReason = asn1_NOVALUE, accountExpiryDate = asn1_NOVALUE, accountStartDate = asn1_NOVALUE, realMoney = asn1_NOVALUE, offerID = asn1_NOVALUE, accountUnitType = asn1_NOVALUE, clearedSubDedicatedAccounts = asn1_NOVALUE}). % with extension mark

-record('ClearedSubDedicatedAccount',{
dedicatedAccountID, clearedAccountValue, accountCreditClearedReason = asn1_NOVALUE, accountExpiryDate = asn1_NOVALUE, accountStartDate = asn1_NOVALUE}). % with extension mark

-record('IndividualPriceFactorHistory',{
individualPriceFactor, units}). % with extension mark

-record('LifeCycleInformation',{
supervisionExpDateBefore = asn1_NOVALUE, supervisionExpDateAfter = asn1_NOVALUE, creditClearancePeriodBefore = asn1_NOVALUE, creditClearancePeriodAfter = asn1_NOVALUE, servFeeExpDateBefore = asn1_NOVALUE, servFeeExpDateAfter = asn1_NOVALUE, serviceRemovalPeriodBefore = asn1_NOVALUE, serviceRemovalPeriodAfter = asn1_NOVALUE, accountFlagsBefore = asn1_NOVALUE, accountFlagsAfter = asn1_NOVALUE}). % with extension mark

-record('MonetaryUnits',{
amount, decimals, currency}).

-record('RatedDurations',{
debitDuration = asn1_NOVALUE, creditDuration = asn1_NOVALUE, freeDuration = asn1_NOVALUE}). % with extension mark

-record('RemovedFaF',{
familyAndFriendsNumber, familyAndFriendsIndicator, fafExpiryDate = asn1_NOVALUE, fafStartDate = asn1_NOVALUE, offerID = asn1_NOVALUE, reason = asn1_NOVALUE, owner = asn1_NOVALUE}). % with extension mark

-record('RemovedOffer',{
offerID, offerExpiryDate = asn1_NOVALUE, offerStartDate = asn1_NOVALUE, reason = asn1_NOVALUE}). % with extension mark

-record('ServiceUnits',{
timeUnit = asn1_NOVALUE, moneyUnit = asn1_NOVALUE, totalOctetsUnit = asn1_NOVALUE, uplinkOctetsUnit = asn1_NOVALUE, downlinkOctetsUnit = asn1_NOVALUE, serviceSpecificUnit = asn1_NOVALUE}). % with extension mark

